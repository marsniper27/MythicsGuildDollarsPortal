{"version":3,"sources":["Globals.js","Float.js","root-reducer.js","store.js","WaxLogin.js","components/BootstrapNavbar.jsx","components/Footer.jsx","components/Home.jsx","components/Slots.jsx","components/Swap.jsx","components/DC.jsx","AtomicAssets.js","components/Account.jsx","components/GlobalStyles.js","components/Theme.js","App.js","index.js"],"names":["globalsSlice","createSlice","name","initialState","keys","user","wax","nfts","reducers","logKey","state","newItem","payload","logUser","logNfts","setWax","actions","floatSlice","accountName","setAccountName","rootPersistConfig","key","storage","rootReducer","combineReducers","global","GlobalsReducer","float","FloatReducer","persistReducer","store","configureStore","reducer","persistor","persistStore","Waxlogin","userAccount","useSelector","dispatch","useDispatch","api","ExplorerApi","fetch","a","login","publicKeys","pubKeys","getAssets","owner","collection_name","fetchedNft","document","getElementById","append","console","log","error","LoginButton","useState","isLogingIn","setLogingIn","isLogingOut","setLogingOut","useEffect","waxjs","rpcEndpoint","Login","then","handleClick","Button","variant","disabled","onClick","Loginb","NavBar","Navbar","bg","Container","fluid","Brand","as","Link","to","className","alt","src","width","height","Toggle","aria-controls","Collapse","id","Nav","href","Text","BootStrapNavbar","Footer","Home","style","display","justifyContent","alignItems","Image","Table","bordered","hover","Slots","flex","Swap","floatAccount","nftCounter","setNftCounter","loadedFloat","setLoadedFloat","floatNft","setFloat","requestedNfts","requestedValue","setRequestedValue","Nfts","waxTest","transact","account","authorization","actor","permission","data","amount","blocksBehind","expireSeconds","result","window","alert","getFloat","Row","transferNFT","color","md","Col","classname","img","hight","length","lg","background","Grid","container","map","nft","item","xs","nftId","nftValue","push","parseInt","swap","DC","currentMode","setMode","setDCName","tempName","setTempName","handleSubmit","createGame","onSubmit","type","value","onChange","e","target","joinGame","Select","Mode","Asset","Account","text","GlobalStyles","createGlobalStyle","theme","body","darkTheme","toggleBorder","App","loading","BootstrapNavbar","path","element","index","ReactDOM","render"],"mappings":"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","file":"static/js/main.ef013182.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\r\n\r\nexport const globalsSlice = createSlice({\r\n    name: 'global',\r\n    initialState: {\r\n        keys: null,\r\n        user: null,\r\n        wax: null,\r\n        nfts: null\r\n    },\r\n    reducers: {\r\n        logKey: (state,newItem) => {state.keys = newItem.payload},\r\n        logUser: (state,newItem) => {state.user = newItem.payload},\r\n        logNfts:(state,newItem ) => {state.nfts = newItem.payload},\r\n        setWax: (state,newItem ) => {state.wax = newItem.payload},\r\n    }   \r\n})\r\n\r\n// Action creators are generated for each case reducer function\r\nexport const { logKey,logUser,logNfts, setWax } = globalsSlice.actions\r\n\r\nexport default globalsSlice.reducer","import { createSlice } from '@reduxjs/toolkit'\r\n\r\nexport const floatSlice = createSlice({\r\n    name: 'float',\r\n    initialState: {\r\n        keys: null,\r\n        accountName: \".bab.wam\",\r\n        nfts: null,\r\n        wax: null,\r\n    },\r\n    reducers: {\r\n        logKey: (state,newItem) => {state.keys = newItem.payload},\r\n        logNfts:(state,newItem ) => {state.nfts = newItem.payload},\r\n        setWax: (state,newItem ) => {state.wax = newItem.payload},\r\n        setAccountName: (state,newItem ) => {state.accountName = newItem.payload},\r\n    }   \r\n})\r\n\r\n// Action creators are generated for each case reducer function\r\nexport const { logKey,logNfts, setWax,setAccountName } = floatSlice.actions\r\n\r\nexport default floatSlice.reducer","import {combineReducers} from '@reduxjs/toolkit'\r\nimport{ persistReducer } from 'redux-persist'\r\nimport storage from 'redux-persist/lib/storage' // defaults to localStorage for web\r\nimport GlobalsReducer from './Globals'\r\nimport FloatReducer from './Float'\r\n\r\nconst rootPersistConfig = {\r\n   key: 'root',\r\n   storage,\r\n}\r\nexport const rootReducer = combineReducers({\r\n    global:  GlobalsReducer,\r\n    float: FloatReducer,\r\n})\r\n\r\n\r\nexport default persistReducer(rootPersistConfig, rootReducer)","import { configureStore } from '@reduxjs/toolkit'\r\nimport { persistStore } from 'redux-persist'\r\nimport persistReducer from \"./root-reducer\"\r\n\r\nexport const store = configureStore({\r\n  reducer: persistReducer\r\n})\r\n//export const store = createStore(persistReducer,applyMiddleware)\r\n\r\nexport const persistor = persistStore(store)\r\n\r\nexport default (store, persistor);","import React, { useState, useEffect} from 'react';\r\nimport {ExplorerApi} from \"atomicassets\";\r\nimport * as waxjs from \"@waxio/waxjs/dist\";\r\nimport Button from 'react-bootstrap/Button';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport{ logKey, logNfts, logUser, setWax } from \"./Globals\";\r\n\r\nfunction Waxlogin(){\r\n  const userAccount = useSelector(state => state.global.user)\r\n  const dispatch = useDispatch()\r\n  const api = new ExplorerApi(\"https://wax.api.atomicassets.io\", \"atomicassets\", {fetch});\r\n  \r\n  async function Login (wax) {    \r\n      try {\r\n        const user = await wax.login();\r\n        const publicKeys = wax.pubKeys;\r\n        const  fetchedNft =  await api.getAssets({owner: user, collection_name:\"mythicsguild\" });     \r\n        document.getElementById('accountName').append(user);\r\n        dispatch(logUser(user));\r\n        dispatch(logKey(publicKeys));\r\n        dispatch(logNfts(fetchedNft));\r\n        console.log(\"keys :\", publicKeys);\r\n        console.log(\"user :\", user);\r\n      } catch(e) {\r\n        console.error(\"login failed : \", e);\r\n        //document.getElementById('error').textContent(e.message);\r\n      }\r\n  }\r\n\r\n  function LogOut(){\r\n    dispatch(logUser(null));\r\n    dispatch(logNfts(null));\r\n    dispatch(logKey(null));\r\n    dispatch(setWax(null))\r\n  }\r\n\r\n  const LoginButton = () => {\r\n    const [isLogingIn, setLogingIn] = useState(false);\r\n    const [isLogingOut, setLogingOut] = useState(false);\r\n\r\n    useEffect(() => {\r\n      if (userAccount == null)  {\r\n        if (isLogingIn) {\r\n          const wax = new waxjs.WaxJS({\r\n            rpcEndpoint: \"https://wax.greymass.com\",\r\n          });\r\n          dispatch(setWax(wax))\r\n          Login(wax).then(() => {setLogingIn(false)});\r\n        }\r\n      }\r\n      else{\r\n        if (isLogingOut) {\r\n          LogOut();\r\n          setLogingOut(false);\r\n        }\r\n      }\r\n    }, [isLogingIn,isLogingOut]);\r\n\r\n    const handleClick = () => {\r\n      if(userAccount == null){\r\n        setLogingIn(true);\r\n      }\r\n      else{\r\n        setLogingOut(true);\r\n      }\r\n    }\r\n\r\n    if (userAccount == null)  {\r\n      return ( \r\n        <Button\r\n          variant=\"primary\"\r\n          disabled={isLogingIn}\r\n          onClick={!isLogingIn ? handleClick : null}\r\n        >\r\n          {isLogingIn ? 'Loging In…' : 'Login'}\r\n        </Button>\r\n      )\r\n    }\r\n    else{\r\n      return(\r\n        <Button\r\n          variant=\"primary\"\r\n          disabled={isLogingOut}\r\n          onClick={!isLogingOut ? handleClick : null}\r\n        >\r\n          {isLogingOut ? 'Loging Out…' : 'Log Out'}\r\n        </Button>\r\n      )\r\n    }\r\n  }\r\n\r\n  return <LoginButton/>\r\n}\r\n\r\nconst Loginb = () => (\r\n  Waxlogin()\r\n);\r\nexport default Loginb","import React from 'react';\r\nimport {Link } from 'react-router-dom';\r\n\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Login from '../WaxLogin';\r\nimport { useSelector } from 'react-redux';\r\n\r\nexport function BootStrapNavbar(){\r\n    const userAccount = useSelector(state => state.global.user)\r\n    const NavBar = () => (\r\n        //<div>\r\n           // <div>\r\n                <Navbar bg=\"black\"  variant=\"dark\" >\r\n                <Container fluid>\r\n                        <Navbar.Brand as={Link} to=\"/\" className=\"brand\">\r\n                            <img\r\n                                alt=\"\"\r\n                                src=\"https://gateway.pinata.cloud/ipfs/QmUZhMHXBA2q3rRZYkcL5jaoXYizoHH9bxfCPEZWNsT2Cu\"\r\n                                width=\"60\"\r\n                                height=\"60\"\r\n                                className=\"d-inline-block align-top\"\r\n                            />{' '}\r\n                            Mythics Guild Dollars Portal                \r\n                        </Navbar.Brand>\r\n                        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                        <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                            <Nav className=\"me-auto\">\r\n                                <Nav.Link as={Link} to=\"/DC\">DC Bets</Nav.Link>\r\n                                <Nav.Link as={Link} to=\"/Slots\">MG$ Slots</Nav.Link>\r\n                                <Nav.Link as={Link} to=\"/Swap\">MG$ Swap</Nav.Link>\r\n                                <Nav.Link href=\"https://mythicsg.webflow.io/\">Mythics Guild</Nav.Link>\r\n                            </Nav>\r\n                        </Navbar.Collapse>\r\n                        <Navbar.Collapse className=\"justify-content-end\">\r\n                        <Navbar.Text >\r\n                            <Login/>\r\n                            Signed in as: <Nav.Link as={Link} to=\"/Account\" id=\"accountName\" > {userAccount} </Nav.Link>\r\n                        </Navbar.Text>\r\n                        </Navbar.Collapse>\r\n                    </Container>\r\n                </Navbar>\r\n           // </div>\r\n        //</div>\r\n    );\r\n    return(<NavBar/>)\r\n}\r\n\r\nconst NavBar = () =>(\r\n    BootStrapNavbar()\r\n)\r\n\r\nexport default NavBar;","import React from \"react\";\r\n\r\nfunction Footer() {\r\n  return (\r\n    <div className=\"footer\">\r\n      <footer className=\"py-1 bg-dark fixed-bottom\">\r\n        <div className=\"container\">\r\n          <p className=\"m-0 text-center text-white\">\r\n            Copyright &copy; Mars 2021\r\n          </p>\r\n        </div>\r\n      </footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Footer;","import React from \"react\";\r\nimport { Container,Image, Table } from \"react-bootstrap\";\r\n\r\nfunction Home() {\r\n  return (\r\n    <div className=\"Home\" >\r\n        <Container className=\"p-3\" >\r\n            <h1 className=\"header\"style={{display: 'flex',  justifyContent:'center', alignItems:'center'}}>Welcome To Mythics Guild Dollars Portal</h1>\r\n            <div style={{display: 'flex',  justifyContent:'center', alignItems:'center'}}>\r\n              <Image className = \"logo\" \r\n                width=\"500\" \r\n                height=\"500\" \r\n                src=\"https://gateway.pinata.cloud/ipfs/QmUZhMHXBA2q3rRZYkcL5jaoXYizoHH9bxfCPEZWNsT2Cu\" \r\n              />\r\n            </div>\r\n        </Container>\r\n        <Container>\r\n          <Table bordered hover>\r\n            <thead>\r\n              <tr>\r\n                <th>Dark Country Betting</th>\r\n                <th>Mythics Guild Dollars Slots</th>\r\n                <th>Mythics Guilds Dollars Swap</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              <tr>\r\n                <td>Use your MG$ to bet against other players in Dark Countries</td>\r\n                <td>Use your MG$ to spin the slots for a chance to win prizes from the Guild and our supporting NFT Games and communities</td>\r\n                <td>Trade you MG$ Nfts to different denominations. Use to get lower values for use in slots and betting or consolidate your lower values for a higher vlaue</td>\r\n              </tr>\r\n            </tbody>\r\n          </Table>\r\n        </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\n\r\nconst Slots = () => (\r\n    <Container className=\"p-3\" flex =\"true\">\r\n        <h1 className=\"header\">Mythics Guild Dollars Slots</h1>\r\n        <h2 className=\"intro\">Use your MG$ to spin the slots for a chance to win prizes from the Guild and our supporting NFT Games and communities</h2>\r\n        \r\n    </Container>\r\n  );\r\n  \r\nexport default Slots;","import React, {useState} from 'react';\r\nimport { useSelector,useDispatch } from 'react-redux';\r\nimport { Button,Container,Col,Row } from 'react-bootstrap'; \r\nimport Grid from '@mui/material/Grid';\r\nimport {ExplorerApi} from \"atomicassets\";\r\nimport * as waxjs from \"@waxio/waxjs/dist\";\r\nimport { logKey,logNfts, setWax,setAccountName } from '../Float';\r\n//import { Wax } from 'ual-wax'\r\nimport { UALProvider, withUAL } from 'ual-reactjs-renderer'\r\n\r\nfunction Swap() {  \r\n  const userAccount = useSelector(state => state.global.user);\r\n  const wax = useSelector(state => state.global.wax);\r\n  const floatAccount = useSelector(state => state.float.accountName);\r\n  const nfts = useSelector(state => state.global.nfts)\r\n  const [nftCounter, setNftCounter] = useState(0);\r\n  const [loadedFloat, setLoadedFloat] = useState(false);\r\n  const [floatNft, setFloat] = useState(null);\r\n  const dispatch = useDispatch();\r\n  let requestedNfts = [];\r\n  const [requestedValue, setRequestedValue] = useState(0);\r\n\r\n  async function getFloat(){\r\n    const api = new ExplorerApi(\"https://wax.api.atomicassets.io\", \"atomicassets\", {fetch});\r\n    try {\r\n      const  Nfts =  await api.getAssets({owner: floatAccount, collection_name:\"mythicsguild\" });\r\n      dispatch(logNfts(Nfts));\r\n      setFloat(Nfts)\r\n      setLoadedFloat(true);\r\n    } \r\n    catch(e) {\r\n      console.error(\"login failed : \", e);\r\n    }\r\n  }\r\n\r\n  const nextNFT = () =>{\r\n    nftCounter !== nfts.length-1 ? setNftCounter(nftCounter+1) : setNftCounter(0);\r\n  }\r\n\r\n  const prevNFT = () =>{\r\n    nftCounter !== 0 ? setNftCounter(nftCounter-1) :  setNftCounter(nfts.length-1);\r\n  }\r\n  \r\n  const selectTrade = (nftId,nftValue) =>{\r\n\t  requestedNfts.push(nftId);\r\n\t  setRequestedValue(requestedValue+parseInt(nftValue));\r\n  }\r\n\r\n  async function transferNFT() {\r\n    const waxTest = new waxjs.WaxJS({ \r\n      rpcEndpoint: 'https://testnet.wax.eosdetroit.io'})\r\n       //userAccount: 'marsniper222',\r\n       //pubKeys: ['EOS72WyAAcCWAhCQY8gafz7FZ8SXbvPDbcoxHE9sX7FCNUiaH8VEU'] });\r\n    const userTestAccount = await waxTest.login();\r\n    try{\r\n      const result = await waxTest.api.transact({\r\n        actions: [{\r\n          account: 'marsniper222',\r\n          name: 'swapmgd',\r\n          authorization: [{\r\n            actor: waxTest.userAccount,\r\n            permission: 'active',\r\n          }],\r\n          data: {\r\n            user: waxTest.userAccount,\r\n            to: 'letstestthis',\r\n            amount: \"0.00000001 WAX\",\r\n          },\r\n        }]\r\n      }, {\r\n        blocksBehind: 3,\r\n        expireSeconds: 30,\r\n       });\r\n    window.alert([result])\r\n  }\r\n  catch (err) {\r\n    throw(err)\r\n  }\r\n\r\n    // try {\r\n    //   const resultWithConfig = await waxTest.api.transact({\r\n    //     actions: [{\r\n    //       account: 'marsniper222',\r\n    //       name: 'swapmgd',\r\n    //       authorization: [{\r\n    //         actor: waxTest.userAccount,\r\n    //         permission: 'active',\r\n    //       }],\r\n    //       data: {\r\n    //         user:waxTest.userAccount,\r\n    //         to: \"letstestthis\",\r\n    //         amount: \"0.001 WAX\"\r\n    //       },\r\n    //     }]\r\n    //   }, {\r\n    //     blocksBehind: 3,\r\n    //     expireSeconds: 30,\r\n    //   });\r\n    //   return resultWithConfig;\r\n    // } catch (err) {\r\n    //   throw(err)\r\n    // }\r\n  }\r\n  \r\n  const swap = () => {\r\n    if(loadedFloat == false){ getFloat() }\r\n    return(\r\n      <Container className=\"p-3\" flex =\"true\" >\r\n          <h1 className=\"header\" style={{display: 'flex',  justifyContent:'center', alignItems:'center'}}>Mythics Guild Dollars Swap</h1>\r\n          <h2 className=\"intro\" style={{display: 'flex',  justifyContent:'center', alignItems:'center'}}>Trade you MG$ Nfts to different denominations. Use to get lower values for use in slots and betting or consolidate your lower values for a higher vlaue.</h2>\r\n          <Row className=\"justify-content-md-center\">\r\n                  <Button onClick={()=>transferNFT()} color=\"primary\" variant=\"contained\" variant=\"secondary\">\r\n                    Transfer to test account\r\n                  </Button>\r\n                   <h4 md=\"auto\">Value of selected NFTs: MG${requestedValue}</h4>\r\n            {userAccount != null ?\r\n              nfts != null ? \r\n                <Col md=\"auto\">\r\n                  <Container classname = \"nftSelector\" md=\"auto\">\r\n                    <img key =\"nftImage\" alt = \"NFT\" src = {\"https://ipfs.atomichub.io/ipfs/\" + nfts[nftCounter].data.img} width = \"100\" hight = \"100\" />\r\n                    <h4 md=\"auto\">{nfts[nftCounter].name}</h4>\r\n                    <h4 md=\"auto\">MG${nfts[nftCounter].data['dollar value']}</h4>\r\n                      <Button onClick={()=>prevNFT()} color=\"primary\" variant=\"contained\" variant=\"secondary\">\r\n                        Prev NFT\r\n                      </Button>\r\n                      {' '}\r\n                      <Button  onClick={()=>nextNFT()} color=\"primary\" variant=\"contained\" variant=\"secondary\">\r\n                        Next NFT\r\n                      </Button>\r\n                    <h4 md=\"auto\">{nftCounter}/{nfts.length}</h4>\r\n                  </Container>\r\n                </Col>\r\n              :\r\n                <Col md=\"auto\">\r\n                  <Container key = \"noNft\">\r\n                    <h1 key =\"message\">No NFTs linked to {userAccount}.</h1>\r\n                  </Container> \r\n                </Col>\r\n            :\r\n            <Col md=\"auto\">\r\n              \"Please Login\"\r\n            </Col>\r\n            }\r\n            {floatNft != null ?\r\n              <Col md=\"auto\" lg>\r\n                <Container style={{background:'gray'}}>\r\n                  <h1  style={{display: 'flex',  justifyContent:'center', alignItems:'center'}}>Float</h1>\r\n                  <Container key=\"gridContianer\" background = \"gray\">\r\n                    <Grid key = \"floatNftGrid\" container justifyContent = \"space-evenly\" alignItems = \"center\" >\r\n                      {floatNft.map((nft)=> \r\n                        <Grid key ={nft.id} item xs={2}>\r\n                          <h4 key={nft.id}>{nft.name}</h4>\r\n                          <img key ={nft.id} alt = \"NFTs\" src = {\"https://ipfs.atomichub.io/ipfs/\" + nft.data.img} width = \"75\" hight = \"75\" />\r\n                          <h4 key={nft.id}>MG${nft.data['dollar value']}</h4>\r\n\t\t\t\t\t\t  <Button  onClick={()=>selectTrade(nft.id,nft.data['dollar value'])} color=\"primary\" variant=\"contained\" variant=\"secondary\">\r\n\t\t\t\t\t\t\tSelect NFT\r\n\t\t\t\t\t\t  </Button>\r\n                        </Grid>\r\n                      )}\r\n                    </Grid>\r\n                  </Container>\r\n                </Container>\r\n              </Col>\r\n            :\r\n              <Col md=\"auto\">\r\n                <h1>Float is Empty</h1>\r\n              </Col>\r\n            } \r\n          </Row>\r\n        </Container>\r\n    )\r\n  }\r\n  return swap()\r\n}\r\n  \r\nexport default Swap;","import React, {useState}  from 'react';\r\nimport {Container, Button} from 'react-bootstrap';\r\n\r\nfunction DC(){\r\n  const [currentMode, setMode] = useState(null);\r\n  const [gameID, setGameId] = useState(null);\r\n  const [dcName, setDCName] = useState(\"\");\r\n  const [tempName, setTempName] = useState(\"\");\r\n\r\n  \r\n const creatClick = () => {\r\n    setMode(\"Create\");\r\n    return createGame();\r\n }\r\n  const handleSubmit =() =>{\r\n    setDCName(tempName);\r\n  }\r\n\r\n  const createGame = () =>(\r\n      <Container>\r\n        <form onSubmit={handleSubmit}>\r\n          <label>\r\n            DC Username:\r\n            <input key= \"nameInput\" type=\"text\" value={tempName} onChange={(e) => setTempName(e.target.value)}/>\r\n          </label>\r\n          <input type=\"submit\" value=\"Submit\" />\r\n        </form>\r\n        <h4>tempName = {tempName}</h4>\r\n      </Container>\r\n  )\r\n\r\n  const joinGame = () => {\r\n    setMode(\"Join\")\r\n    return(\r\n      <Container>\r\n        <form>\r\n          <label>\r\n            Game ID:\r\n            <input type=\"text\" name=\"game_ID\" />\r\n          </label>\r\n          <input type=\"submit\" value=\"Submit\" />\r\n        </form>\r\n      </Container>\r\n    )\r\n  }\r\n  \r\n  const Select = () => (\r\n    <Container>\r\n      <Button onClick={()=>creatClick()} color=\"primary\" variant=\"contained\">\r\n          Create Game\r\n      </Button>\r\n      <Button onClick={()=>joinGame()} color=\"primary\" variant=\"contained\">\r\n          Join Game\r\n      </Button>\r\n    </Container>\r\n  )\r\n\r\n  const Mode = () =>{\r\n    switch(currentMode){\r\n      case null:\r\n        return Select();\r\n        break;\r\n      case \"Create\":\r\n        return createGame();\r\n        break;\r\n      case \"Join\":\r\n        return joinGame();\r\n        break;\r\n      default:\r\n        Select()\r\n    }\r\n  }\r\n  \r\n  const DC = () => (\r\n    <Container className=\"p-3\" flex =\"true\">\r\n        <h1 className=\"header\">Dark Country Betting</h1>\r\n        <h2 className=\"intro\">Use your MG$ to bet against other players in Dark Countries.</h2>\r\n        <Mode/>\r\n    </Container>\r\n  );\r\n  return DC();\r\n}\r\n\r\nexport default DC;","import React from 'react';\r\nimport { Container } from 'react-bootstrap';\r\nimport { useSelector } from 'react-redux';\r\nimport Grid from '@mui/material/Grid';\r\n\r\nconst Asset = () => {\r\n  const nfts = useSelector(state => state.global.nfts)\r\n  const user = useSelector(state => state.global.user)\r\n\r\n  return (\r\n    user != null ?\r\n      nfts != null ? \r\n        <Container key=\"gridContianer\">          \r\n          <Grid key = \"nftGrid\" container justifyContent = \"space-evenly\" alignItems = \"center\">\r\n            {nfts.map((nft)=> \r\n              <Grid key ={nft.id} item xs={2}>\r\n                <h4 key={nft.id}>{nft.name}</h4>\r\n                <img key ={nft.id} alt = \"NFTs\" src = {\"https://ipfs.atomichub.io/ipfs/\" + nft.data.img} width = \"75\" hight = \"75\" />\r\n                <h4 key={nft.id}>MG${nft.data['dollar value']}</h4>\r\n              </Grid>\r\n            )};\r\n          </Grid>\r\n        </Container>\r\n      : \r\n      <Container key = \"noNft\">\r\n        <h1 key =\"message\">No NFTs linked to {user}</h1>\r\n      </Container> \r\n    :\r\n    \"\"\r\n  );\r\n}\r\nexport default Asset","import React from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Asset from \"../AtomicAssets\";\r\nimport \"../Account.css\"\r\nimport { useSelector} from 'react-redux';\r\n\r\n\r\nfunction Account(){\r\n    const userAccount = useSelector(state => state.global.user);\r\n    \r\n    const account = () => (\r\n        <Container className=\"p-3\" flex =\"true\">\r\n        <h1 className=\"header\">{userAccount==null ? \"Please login\": \"Account: \"+userAccount}</h1>\r\n            <h2 className=\"intro\">All Mythic guild and partner NFTs</h2>\r\n            <Container className = \"body\" text = \"white\">\r\n                <div>\r\n                    <Asset/>\r\n                </div>\r\n            </Container>                \r\n        </Container>\r\n    );\r\n\r\n    return account()\r\n}\r\n  export default Account;\r\n\r\n  /*\r\n  <Asset/>\r\n  */\r\n\r\n  /*  attempted to update on login \r\n\r\n  function Account(){\r\n    const userAccount = useSelector(state => state.global.user);\r\n    const nfts = useSelector(state => state.global.nfts)\r\n    \r\n    const account = () => (\r\n        <Container className=\"p-3\" flex =\"true\">\r\n        <h1 className=\"header\">{userAccount==null ? \"Please login\": \"Account: \"+userAccount}</h1>\r\n            <h2 className=\"intro\">All Mythic guild and partner NFTs</h2>\r\n            <Container className = \"body\"  bg=\"black\"  variant=\"dark\">\r\n                <div>\r\n                    {userAccount != null ?\r\n                        nfts != null \r\n                            ? \r\n                                <Container key=\"gridContianer\">          \r\n                                <Grid key = \"nftGrid\" container justifyContent = \"space-evenly\" alignItems = \"center\">\r\n                                    {nfts.map((nft)=> \r\n                                    <Grid key ={nft.id} item xs={2}>\r\n                                        <h4 key={nft.id}>{nft.name}</h4>\r\n                                        <img key ={nft.id} alt = \"NFTs\" src = {\"https://ipfs.atomichub.io/ipfs/\" + nft.data.img} width = \"75\" hight = \"75\" />\r\n                                        <h4 key={nft.id}>MG${nft.data['dollar value']}</h4>\r\n                                    </Grid>\r\n                                    )};\r\n                                </Grid>\r\n                                </Container>\r\n                            : \r\n                            <Container key = \"noNft\">\r\n                                <h1 key =\"message\">No NFTs linked to account.</h1>\r\n                            </Container> \r\n                        :\r\n                        \"\"\r\n                    }\r\n                </div>\r\n            </Container>                \r\n        </Container>\r\n    );\r\n\r\n    return account()\r\n}\r\n\r\n  */","import { createGlobalStyle} from \"styled-components\"\r\nexport const GlobalStyles = createGlobalStyle`\r\n  body {\r\n    background: ${({ theme }) => theme.body};\r\n    color: ${({ theme }) => theme.text};\r\n    font-family: Tahoma, Helvetica, Arial, Roboto, sans-serif;\r\n    transition: all 0.50s linear;\r\n  }`\r\nexport default GlobalStyles","export const lightTheme = {\r\n    body: '#FFF',\r\n    text: '#363537',\r\n    toggleBorder: '#FFF',\r\n    background: '#363537',\r\n}\r\nexport const darkTheme = {\r\n    body: '#000000',\r\n    text: '#FAFAFA',\r\n    toggleBorder: '#6B8096',\r\n    background: '#000000',\r\n}","import React from 'react';\r\nimport { Routes, Route} from 'react-router-dom';\r\nimport {store,persistor} from './store'\r\nimport { PersistGate } from 'redux-persist/integration/react'\r\nimport { Provider } from 'react-redux'\r\nimport { BootstrapNavbar, Footer, Home, DC, Slots, Swap, Account } from \"./components\";\r\nimport {ThemeProvider} from \"styled-components\";\r\nimport { GlobalStyles } from \"./components/GlobalStyles\";\r\nimport { lightTheme, darkTheme } from \"./components/Theme\";\r\n\r\nfunction App() {\r\n  return (\r\n    <ThemeProvider theme={darkTheme}>\r\n      \r\n    <GlobalStyles/>\r\n    <div className=\"App\"> \r\n      <Provider store={store}>            \r\n          <PersistGate loading={null} persistor={persistor}>\r\n            <BootstrapNavbar />\r\n            <Routes>\r\n                <Route path=\"/\" element={<App />}/>\r\n                <Route index element={<Home />} />\r\n                <Route path=\"/DC\" element={ <DC />} />\r\n                <Route path=\"/slots\" element={ <Slots />} />\r\n                <Route path=\"/Swap\" element={<Swap />} />\r\n                <Route path=\"/Account\" element={<Account />} />\r\n            </Routes>\r\n            <Footer />\r\n          </PersistGate>\r\n        </Provider>\r\n    </div>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './index.css';\r\nimport {store,persistor} from './store'\r\nimport { Provider } from 'react-redux'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport IpfsRouter from 'ipfs-react-router';\r\nimport { Container } from 'react-bootstrap';\r\nimport { PersistGate } from 'redux-persist/integration/react'\r\n\r\nReactDOM.render(\r\n    <IpfsRouter> \r\n        <Provider store={store}>            \r\n            <PersistGate loading={null} persistor={persistor}>\r\n                <App/>\r\n            </PersistGate>\r\n        </Provider>\r\n    </IpfsRouter>,\r\n    document.getElementById('root'));"],"sourceRoot":""}