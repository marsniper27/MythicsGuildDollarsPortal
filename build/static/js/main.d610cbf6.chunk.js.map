{"version":3,"sources":["Globals.js","root-reducer.js","store.js","WaxLogin.js","components/BootstrapNavbar.jsx","components/Footer.jsx","components/Home.jsx","components/Slots.jsx","components/Swap.jsx","components/DC.jsx","AtomicAssets.js","components/Account.jsx","App.js","index.js"],"names":["globalsSlice","createSlice","name","initialState","keys","user","wax","nfts","reducers","logKey","state","newItem","payload","logUser","logNfts","setWax","actions","rootPersistConfig","key","storage","rootReducer","combineReducers","global","GlobalsReducer","persistReducer","store","configureStore","reducer","persistor","persistStore","Waxlogin","userAccount","useSelector","dispatch","useDispatch","api","ExplorerApi","fetch","a","login","publicKeys","pubKeys","document","getElementById","append","GetNfts","console","log","error","useEffect","getAssets","owner","collection_name","fetchedNft","fetchData","LoginButton","useState","isLogingIn","setLogingIn","isLogingOut","setLogingOut","Login","waxjs","rpcEndpoint","then","handleClick","Button","variant","disabled","onClick","Loginb","NavBar","Navbar","bg","Container","Brand","as","Link","to","className","alt","src","width","height","Toggle","aria-controls","Collapse","id","Nav","href","Text","BootStrapNavbar","Footer","Home","style","display","justifyContent","alignItems","Image","Table","striped","bordered","hover","Slots","flex","Swap","nftCounter","setNftCounter","classname","data","img","hight","length","color","DC","currentMode","setMode","setDCName","tempName","setTempName","handleSubmit","createGame","onSubmit","type","value","onChange","e","target","joinGame","Select","Mode","Asset","Grid","container","map","nft","item","xs","Account","text","App","loading","BootstrapNavbar","path","element","index","ReactDOM","render"],"mappings":"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","file":"static/js/main.d610cbf6.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\r\n\r\nexport const globalsSlice = createSlice({\r\n    name: 'global',\r\n    initialState: {\r\n        keys: null,\r\n        user: null,\r\n        wax: null,\r\n        nfts: null\r\n    },\r\n    reducers: {\r\n        logKey: (state,newItem) => {state.keys = newItem.payload},\r\n        logUser: (state,newItem) => {state.user = newItem.payload},\r\n        logNfts:(state,newItem ) => {state.nfts = newItem.payload},\r\n        setWax: (state,newItem ) => {state.wax = newItem.payload},\r\n    }   \r\n})\r\n\r\n\r\n// Action creators are generated for each case reducer function\r\nexport const { logKey,logUser,logNfts, setWax } = globalsSlice.actions\r\n\r\nexport default globalsSlice.reducer","import {combineReducers} from '@reduxjs/toolkit'\r\nimport{ persistReducer } from 'redux-persist'\r\nimport storage from 'redux-persist/lib/storage' // defaults to localStorage for web\r\nimport GlobalsReducer from './Globals'\r\n\r\nconst rootPersistConfig = {\r\n   key: 'root',\r\n   storage,\r\n}\r\nexport const rootReducer = combineReducers({\r\n    global:  GlobalsReducer})\r\n\r\n\r\nexport default persistReducer(rootPersistConfig, rootReducer)","import { configureStore } from '@reduxjs/toolkit'\r\nimport { persistStore } from 'redux-persist'\r\nimport persistReducer from \"./root-reducer\"\r\n\r\nexport const store = configureStore({\r\n  reducer: persistReducer\r\n})\r\n//export const store = createStore(persistReducer,applyMiddleware)\r\n\r\nexport const persistor = persistStore(store)\r\n\r\nexport default (store, persistor);","import React, { useState, useEffect} from 'react';\r\nimport {ExplorerApi} from \"atomicassets\";\r\nimport * as waxjs from \"@waxio/waxjs/dist\";\r\nimport Button from 'react-bootstrap/Button';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport{ logKey, logNfts, logUser, setWax } from \"./Globals\";\r\n\r\nfunction Waxlogin(){\r\n  const userAccount = useSelector(state => state.global.user)\r\n  const dispatch = useDispatch()\r\n  const api = new ExplorerApi(\"https://wax.api.atomicassets.io\", \"atomicassets\", {fetch});\r\n  \r\n  async function Login (wax) {    \r\n      try {\r\n        const user = await wax.login();\r\n        const publicKeys = wax.pubKeys;\r\n        document.getElementById('accountName').append(user);\r\n        dispatch(logUser(user));\r\n        dispatch(logKey(publicKeys));\r\n        dispatch(logNfts(GetNfts()))\r\n        console.log(\"keys :\", publicKeys);\r\n        console.log(\"user :\", user);\r\n      } catch(e) {\r\n        console.error(\"login failed : \", e);\r\n        //document.getElementById('error').textContent(e.message);\r\n      }\r\n  }\r\n\r\n  function GetNfts(){\r\n    useEffect(() => {\r\n      const fetchData = async () =>  {\r\n        const  fetchedNft =  await api.getAssets({owner: userAccount, collection_name:\"mythicsguild\" });\r\n        dispatch(logNfts(fetchedNft));\r\n      }\r\n      fetchData();\r\n    }, );\r\n  }\r\n\r\n  function LogOut(){\r\n    dispatch(logUser(null));\r\n    dispatch(logNfts(null));\r\n    dispatch(logKey(null));\r\n    dispatch(setWax(null))\r\n  }\r\n\r\n  const LoginButton = () => {\r\n    const [isLogingIn, setLogingIn] = useState(false);\r\n    const [isLogingOut, setLogingOut] = useState(false);\r\n\r\n    useEffect(() => {\r\n      if (userAccount == null)  {\r\n        if (isLogingIn) {\r\n          const wax = new waxjs.WaxJS({\r\n            rpcEndpoint: \"https://wax.greymass.com\",\r\n          });\r\n          //dispatch(setWax(wax))\r\n          Login(wax).then(() => {setLogingIn(false)});\r\n        }\r\n      }\r\n      else{\r\n        if (isLogingOut) {\r\n          LogOut();\r\n          setLogingOut(false);\r\n        }\r\n      }\r\n    }, [isLogingIn,isLogingOut]);\r\n\r\n    const handleClick = () => {\r\n      if(userAccount == null){\r\n        setLogingIn(true);\r\n      }\r\n      else{\r\n        setLogingOut(true);\r\n      }\r\n    }\r\n\r\n    if (userAccount == null)  {\r\n      return ( \r\n        <Button\r\n          variant=\"primary\"\r\n          disabled={isLogingIn}\r\n          onClick={!isLogingIn ? handleClick : null}\r\n        >\r\n          {isLogingIn ? 'Loging In…' : 'Login'}\r\n        </Button>\r\n      )\r\n    }\r\n    else{\r\n      return(\r\n        <Button\r\n          variant=\"primary\"\r\n          disabled={isLogingOut}\r\n          onClick={!isLogingOut ? handleClick : null}\r\n        >\r\n          {isLogingOut ? 'Loging Out…' : 'Log Out'}\r\n        </Button>\r\n      )\r\n    }\r\n  }\r\n\r\n  return <LoginButton/>\r\n}\r\n\r\nconst Loginb = () => (\r\n  Waxlogin()\r\n);\r\nexport default Loginb\r\n/*\r\nconst wax = new waxjs.WaxJS({\r\n  rpcEndpoint: 'https://wax.greymass.com'\r\n});\r\n*/\r\n\r\n//automatically check for credentials\r\n//autoLogin();\r\n\r\n//checks if autologin is available \r\n/*async function autoLogin() {\r\n    let isAutoLoginAvailable = await wax.isAutoLoginAvailable();\r\n    if (isAutoLoginAvailable) {\r\n        let userAccount = wax.userAccount;\r\n        let pubKeys = wax.pubKeys;\r\n        let str = 'AutoLogin enabled for account: ' + userAccount + '<br/>Active: ' + pubKeys[0] + '<br/>Owner: ' + pubKeys[1]\r\n        document.getElementById('autologin').insertAdjacentHTML('beforeend', str);\r\n    }\r\n    else {\r\n        document.getElementById('autologin').insertAdjacentHTML('beforeend', 'Not auto-logged in');\r\n    }\r\n}*/\r\n\r\n/*\r\nasync function sign() {\r\n  if(!wax.api) {\r\n      return document.getElementById('response').append('* Login first *');\r\n  }\r\n  \r\n  try {\r\n    const result = await wax.api.transact({\r\n    actions: [{\r\n        account: 'eosio',\r\n        name: 'delegatebw',\r\n        authorization: [{\r\n        actor: wax.userAccount,\r\n        permission: 'active',\r\n        }],\r\n        data: {\r\n        from: wax.userAccount,\r\n        receiver: wax.userAccount,\r\n        stake_net_quantity: '0.00000001 WAX',\r\n        stake_cpu_quantity: '0.00000000 WAX',\r\n        transfer: false,\r\n        memo: 'This is a WaxJS/Cloud Wallet Demo.'\r\n        },\r\n    }]\r\n    }, {\r\n    blocksBehind: 3,\r\n    expireSeconds: 30\r\n    });\r\n    document.getElementById('response').append(JSON.stringify(result, null, 2))\r\n  } \r\n  catch(e) {\r\n    document.getElementById('response').append(e.message);\r\n  }\r\n}\r\n\r\nasync function getCurrentMessage() {\r\n  const res = await wax.rpc.get_table_rows({\r\n    json: true,\r\n    code: 'test.wax',\r\n    scope: 'test.wax',\r\n    table: 'messages',\r\n    lower_bound: wax.userAccount,\r\n    upper_bound: wax.userAccount,\r\n  });\r\n\r\n  const message = res.rows[0] ? res.rows[0].message : `<No message is set for ${wax.userAccount}>`;\r\n  document.getElementById('current').textContent = message;\r\n}\r\n\r\n\r\n/*\r\nfunction logout() {\r\n  return new Promise((resolve) => setTimeout(resolve, 2000));\r\n}\r\n*/\r\n/*\r\n1 : import waxjs \r\n\r\nimport * as waxjs from \"@waxio/waxjs/dist\";\r\n\r\n2: set up a general wax variable that i can access in all the website\r\n\r\nconst pubKeys = useSelector(state=>state.globals.keys)\r\n    const userAccount = useSelector(state=>state.globals.user)\r\n    const wax = useSelector(state=>state.globals.wax)\r\n\r\nuseEffect(() => {\r\n    console.log(\"login in\");\r\n    const wax = new waxjs.WaxJS({\r\n      rpcEndpoint: \"http://wax.eosn.io/\",\r\n      tryAutoLogin: false,\r\n      userAccount: null,\r\n      pubKeys: null,\r\n    });\r\n    dispatch({\r\n      type:'setWax',\r\n      newItem:wax\r\n    })\r\n    //setWax(wax)\r\n\r\n    console.log(\"wax conected : \", wax);\r\n  }, []);\r\n\r\n3) login action\r\n\r\nasync function login(){\r\n  try {\r\n    const user = await wax.login();\r\n    dispatch({\r\n      type:'logUser',\r\n      newItem:user\r\n    })\r\n    //setUserAccount(user)\r\n    const publicKeys = wax.pubKeys;\r\n    dispatch({\r\n      type:'logKey',\r\n      newItem:publicKeys\r\n    })\r\n    //setpubKeys(publicKeys)\r\n    testAccount()\r\n    console.log(\"keys :\", publicKeys);\r\n    console.log(\"user :\", user);\r\n    //testAccount()\r\n  } \r\n  catch (error) {\r\n    console.error(\"login failed : \", error);\r\n  }\r\n}\r\n*/","import React from 'react';\r\nimport {Link } from 'react-router-dom';\r\n\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Login from '../WaxLogin';\r\nimport { useSelector } from 'react-redux';\r\n\r\nexport function BootStrapNavbar(){\r\n    const userAccount = useSelector(state => state.global.user)\r\n    const NavBar = () => (\r\n        <div>\r\n            <div>\r\n                <Navbar bg=\"black\"  variant=\"dark\" >\r\n                <Container >\r\n                        <Navbar.Brand as={Link} to=\"/\" className=\"brand\">\r\n                            <img\r\n                                alt=\"\"\r\n                                src=\"https://gateway.pinata.cloud/ipfs/QmUZhMHXBA2q3rRZYkcL5jaoXYizoHH9bxfCPEZWNsT2Cu\"\r\n                                width=\"60\"\r\n                                height=\"60\"\r\n                                className=\"d-inline-block align-top\"\r\n                            />{' '}\r\n                            Mythics Guild Dollars Portal                \r\n                        </Navbar.Brand>\r\n                        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                        <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                            <Nav className=\"me-auto\">\r\n                                <Nav.Link as={Link} to=\"/DC\">DC Bets</Nav.Link>\r\n                                <Nav.Link as={Link} to=\"/Slots\">MG$ Slots</Nav.Link>\r\n                                <Nav.Link as={Link} to=\"/Swap\">MG$ Swap</Nav.Link>\r\n                                <Nav.Link href=\"https://mythicsg.webflow.io/\">Mythics Guild</Nav.Link>\r\n                            </Nav>\r\n                        </Navbar.Collapse>\r\n                        <Navbar.Collapse className=\"justify-content-end\">\r\n                        <Navbar.Text >\r\n                            <Login/>\r\n                            Signed in as: <Nav.Link as={Link} to=\"/Account\" id=\"accountName\" > {userAccount} </Nav.Link>\r\n                        </Navbar.Text>\r\n                        </Navbar.Collapse>\r\n                    </Container>\r\n                </Navbar>\r\n            </div>\r\n        </div>\r\n    );\r\n    return(<NavBar/>)\r\n}\r\n\r\nconst NavBar = () =>(\r\n    BootStrapNavbar()\r\n)\r\n\r\nexport default NavBar;","import React from \"react\";\r\n\r\nfunction Footer() {\r\n  return (\r\n    <div className=\"footer\">\r\n      <footer className=\"py-1 bg-dark fixed-bottom\">\r\n        <div className=\"container\">\r\n          <p className=\"m-0 text-center text-white\">\r\n            Copyright &copy; Mars 2021\r\n          </p>\r\n        </div>\r\n      </footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Footer;","import React from \"react\";\r\nimport { Container,Image, Table } from \"react-bootstrap\";\r\n\r\nfunction Home() {\r\n  return (\r\n    <div className=\"Home\" >\r\n        <Container className=\"p-3\" >\r\n            <h1 className=\"header\"style={{display: 'flex',  justifyContent:'center', alignItems:'center'}}>Welcome To Mythics Guild Dollars Portal</h1>\r\n            <div style={{display: 'flex',  justifyContent:'center', alignItems:'center'}}>\r\n              <Image className = \"logo\" \r\n                width=\"500\" \r\n                height=\"500\" \r\n                src=\"https://gateway.pinata.cloud/ipfs/QmUZhMHXBA2q3rRZYkcL5jaoXYizoHH9bxfCPEZWNsT2Cu\" \r\n              />\r\n            </div>\r\n        </Container>\r\n        <Container>\r\n          <Table striped bordered hover>\r\n            <thead>\r\n              <tr>\r\n                <th>Dark Country Betting</th>\r\n                <th>Mythics Guild Dollars Slots</th>\r\n                <th>Mythics Guilds Dollars Swap</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              <tr>\r\n                <td>Use your MG$ to bet against other players in Dark Countries</td>\r\n                <td>Use your MG$ to spin the slots for a chance to win prizes from the Guild and our supporting NFT Games and communities</td>\r\n                <td>Trade you MG$ Nfts to different denominations. Use to get lower values for use in slots and betting or consolidate your lower values for a higher vlaue</td>\r\n              </tr>\r\n            </tbody>\r\n          </Table>\r\n        </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\n\r\nconst Slots = () => (\r\n    <Container className=\"p-3\" flex =\"true\">\r\n        <h1 className=\"header\">Mythics Guild Dollars Slots</h1>\r\n        <h2 className=\"intro\">Use your MG$ to spin the slots for a chance to win prizes from the Guild and our supporting NFT Games and communities</h2>\r\n        \r\n    </Container>\r\n  );\r\n  \r\nexport default Slots;","import React, {useState} from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport { useSelector } from 'react-redux';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nfunction Swap() {  \r\n  const userAccount = useSelector(state => state.global.user);\r\n  const nfts = useSelector(state => state.global.nfts)\r\n  const [nftCounter, setNftCounter] = useState(0);\r\n\r\n  const nextNFT = () =>{\r\n    nftCounter !== nfts.length-1 ? setNftCounter(nftCounter+1) : setNftCounter(0);\r\n  }\r\n  const prevNFT = () =>{\r\n    nftCounter !== 0 ? setNftCounter(nftCounter-1) :  setNftCounter(nfts.length-1);\r\n  }\r\n  \r\n  const swap = () => (\r\n      <Container className=\"p-3\" flex =\"true\">\r\n          <h1 className=\"header\">Mythics Guild Dollars Swap</h1>\r\n          <h2 className=\"intro\">Trade you MG$ Nfts to different denominations. Use to get lower values for use in slots and betting or consolidate your lower values for a higher vlaue.</h2>\r\n          {userAccount != null ?\r\n          <Container classname = \"nftSelector\">\r\n            <img key =\"nftImage\" alt = \"NFT\" src = {\"https://ipfs.atomichub.io/ipfs/\" + nfts[nftCounter].data.img} width = \"100\" hight = \"100\" />\r\n            <h4>{nfts[nftCounter].name}</h4>\r\n            <h4>{nftCounter}</h4>\r\n            <Container>\r\n              <Button onClick={()=>nextNFT()} color=\"primary\" variant=\"contained\">\r\n                Next NFT\r\n              </Button>\r\n              <Button onClick={()=>prevNFT()} color=\"primary\" variant=\"contained\">\r\n                Prev NFT\r\n              </Button>\r\n            </Container>\r\n          </Container>\r\n          :\r\n          \"\"}\r\n      </Container>\r\n  );\r\n  return swap()\r\n}\r\n  \r\nexport default Swap;","import React, {useState}  from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nfunction DC(){\r\n  const [currentMode, setMode] = useState(null);\r\n  const [gameID, setGameId] = useState(null);\r\n  const [dcName, setDCName] = useState(\"\");\r\n  const [tempName, setTempName] = useState(\"\");\r\n\r\n  \r\n const creatClick = () => {\r\n    setMode(\"Create\");\r\n    return createGame();\r\n }\r\n  const handleSubmit =() =>{\r\n    setDCName(tempName);\r\n  }\r\n\r\n  const createGame = () =>(\r\n      <Container>\r\n        <form onSubmit={handleSubmit}>\r\n          <label>\r\n            DC Username:\r\n            <input key= \"nameInput\" type=\"text\" value={tempName} onChange={(e) => setTempName(e.target.value)}/>\r\n          </label>\r\n          <input type=\"submit\" value=\"Submit\" />\r\n        </form>\r\n        <h4>tempName = {tempName}</h4>\r\n      </Container>\r\n  )\r\n\r\n  const joinGame = () => {\r\n    setMode(\"Join\")\r\n    return(\r\n      <Container>\r\n        <form>\r\n          <label>\r\n            Game ID:\r\n            <input type=\"text\" name=\"game_ID\" />\r\n          </label>\r\n          <input type=\"submit\" value=\"Submit\" />\r\n        </form>\r\n      </Container>\r\n    )\r\n  }\r\n  \r\n  const Select = () => (\r\n    <Container>\r\n      <Button onClick={()=>creatClick()} color=\"primary\" variant=\"contained\">\r\n          Create Game\r\n      </Button>\r\n      <Button onClick={()=>joinGame()} color=\"primary\" variant=\"contained\">\r\n          Join Game\r\n      </Button>\r\n    </Container>\r\n  )\r\n\r\n  const Mode = () =>{\r\n    switch(currentMode){\r\n      case null:\r\n        return Select();\r\n        break;\r\n      case \"Create\":\r\n        return createGame();\r\n        break;\r\n      case \"Join\":\r\n        return joinGame();\r\n        break;\r\n      default:\r\n        Select()\r\n    }\r\n  }\r\n  \r\n  const DC = () => (\r\n    <Container className=\"p-3\" flex =\"true\">\r\n        <h1 className=\"header\">Dark Country Betting</h1>\r\n        <h2 className=\"intro\">Use your MG$ to bet against other players in Dark Countries.</h2>\r\n        <Mode/>\r\n    </Container>\r\n  );\r\n  return DC();\r\n}\r\n\r\nexport default DC;","import React from 'react';\r\nimport { Container } from 'react-bootstrap';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport Grid from '@mui/material/Grid';\r\n\r\n/*export function AtomicAssets(){\r\n  const api = new ExplorerApi(\"https://wax.api.atomicassets.io\", \"atomicassets\", {fetch});\r\n  const dispatch = useDispatch()\r\n\r\n  const GetOptions=()=>{\r\n    const userAccount = useSelector(state => state.global.user)\r\n    const options = {owner: userAccount, collection_name:\"mythicsguild\" };\r\n    return options;\r\n  }\r\n\r\n function GetAssets(){\r\n    const options = GetOptions();\r\n\r\n    useEffect(() => {\r\n      const fetchData = async () =>  {\r\n        const  fetchedNft =  await api.getAssets(options);\r\n        dispatch(logNfts(fetchedNft));\r\n      }\r\n      fetchData();\r\n    }, [options]);\r\n  }\r\n  return GetAssets()\r\n}\r\n*/\r\n\r\nconst Asset = () => {\r\n  const nfts = useSelector(state => state.global.nfts)\r\n  const user = useSelector(state => state.global.user)\r\n\r\n  return (\r\n    user != null ?\r\n      nfts != null ? \r\n        <Container key=\"gridContianer\">          \r\n          <Grid key = \"nftGrid\" container justifyContent = \"space-evenly\" alignItems = \"center\">\r\n            {nfts.map((nft)=> \r\n              <Grid key ={nft.id} item xs={2}>\r\n                <h4 key={nft.id}>{nft.name}</h4>\r\n                <img key ={nft.id} alt = \"NFTs\" src = {\"https://ipfs.atomichub.io/ipfs/\" + nft.data.img} width = \"75\" hight = \"75\" />\r\n                <h4 key={nft.id}>MG${nft.data['dollar value']}</h4>\r\n              </Grid>\r\n            )};\r\n          </Grid>\r\n        </Container>\r\n      : \r\n      <Container key = \"noNft\">\r\n        <h1 key =\"message\">No NFTs linked to account.</h1>\r\n      </Container> \r\n    :\r\n    \"\"\r\n  );\r\n}\r\nexport default Asset\r\n/*\r\n\r\n                    //<h3 id=\"nftName\">{nft.name}</h3>\r\n\r\n <ul>\r\n            {nfts.map((nft)=>\r\n              <li>\r\n                <h3>{nft.name}</h3>\r\n                <img alt = \"missing\" src = {\"https://ipfs.atomichub.io/ipfs/\" + nft.data.img} width = \"200\" hight = \"200\" />\r\n              </li>)\r\n              }\r\n          </ul>\r\n*/\r\n\r\n    //const assets = await api.getAsset(\"Runrc.wam\", \"mythicsguild\");  \r\n    \r\n\r\n/*\r\n\r\nnumbers.map((number) =>\r\n  <li>{number}</li>\r\n\r\n\r\nhttps://test.wax.api.atomicassets.io\r\n\r\n\r\n  data\r\n    template\r\n      immutable_data\r\n        img\r\n        name\r\n        dollar value\r\n*/\r\n\r\n/*\r\n\r\n        <Grid container justifyContent = \"space-evenly\" alignItems = \"center\">\r\n            {nfts.map((nft)=> (\r\n              <Grid key={nft.name} item xs={2]}></tr>\r\n                  <h3 id=\"nftName\">{nft.name}</h3>\r\n                <img alt = \"NFTs\" src = {\"https://ipfs.atomichub.io/ipfs/\" + nft.data.img} width = \"75\" hight = \"75\" className={classes.mainImage}/>\r\n              </Grid>\r\n            ))}\r\n        </Grid>\r\n*/","import React from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Asset from \"../AtomicAssets\";\r\nimport \"../Account.css\"\r\nimport { useSelector} from 'react-redux';\r\n\r\n\r\nfunction Account(){\r\n    const userAccount = useSelector(state => state.global.user);\r\n    \r\n    const account = () => (\r\n        <Container className=\"p-3\" flex =\"true\">\r\n        <h1 className=\"header\">{userAccount==null ? \"Please login\": \"Account: \"+userAccount}</h1>\r\n            <h2 className=\"intro\">All Mythic guild and partner NFTs</h2>\r\n            <Container className = \"body\" text = \"white\">\r\n                <div>\r\n                    <Asset/>\r\n                </div>\r\n            </Container>                \r\n        </Container>\r\n    );\r\n\r\n    return account()\r\n}\r\n  export default Account;\r\n\r\n  /*\r\n  <Asset/>\r\n  */\r\n\r\n  /*  attempted to update on login \r\n\r\n  function Account(){\r\n    const userAccount = useSelector(state => state.global.user);\r\n    const nfts = useSelector(state => state.global.nfts)\r\n    \r\n    const account = () => (\r\n        <Container className=\"p-3\" flex =\"true\">\r\n        <h1 className=\"header\">{userAccount==null ? \"Please login\": \"Account: \"+userAccount}</h1>\r\n            <h2 className=\"intro\">All Mythic guild and partner NFTs</h2>\r\n            <Container className = \"body\"  bg=\"black\"  variant=\"dark\">\r\n                <div>\r\n                    {userAccount != null ?\r\n                        nfts != null \r\n                            ? \r\n                                <Container key=\"gridContianer\">          \r\n                                <Grid key = \"nftGrid\" container justifyContent = \"space-evenly\" alignItems = \"center\">\r\n                                    {nfts.map((nft)=> \r\n                                    <Grid key ={nft.id} item xs={2}>\r\n                                        <h4 key={nft.id}>{nft.name}</h4>\r\n                                        <img key ={nft.id} alt = \"NFTs\" src = {\"https://ipfs.atomichub.io/ipfs/\" + nft.data.img} width = \"75\" hight = \"75\" />\r\n                                        <h4 key={nft.id}>MG${nft.data['dollar value']}</h4>\r\n                                    </Grid>\r\n                                    )};\r\n                                </Grid>\r\n                                </Container>\r\n                            : \r\n                            <Container key = \"noNft\">\r\n                                <h1 key =\"message\">No NFTs linked to account.</h1>\r\n                            </Container> \r\n                        :\r\n                        \"\"\r\n                    }\r\n                </div>\r\n            </Container>                \r\n        </Container>\r\n    );\r\n\r\n    return account()\r\n}\r\n\r\n  */","import React from 'react';\r\nimport { Routes, Route} from 'react-router-dom';\r\nimport {store,persistor} from './store'\r\nimport { PersistGate } from 'redux-persist/integration/react'\r\nimport { Provider } from 'react-redux'\r\nimport { BootstrapNavbar, Footer, Home, DC, Slots, Swap, Account } from \"./components\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\"> \r\n      <Provider store={store}>            \r\n          <PersistGate loading={null} persistor={persistor}>\r\n            <BootstrapNavbar />\r\n            <Routes>\r\n                <Route path=\"/\" element={<App />}/>\r\n                <Route index element={<Home />} />\r\n                <Route path=\"/DC\" element={ <DC />} />\r\n                <Route path=\"/slots\" element={ <Slots />} />\r\n                <Route path=\"/Swap\" element={<Swap />} />\r\n                <Route path=\"/Account\" element={<Account />} />\r\n            </Routes>\r\n            <Footer />\r\n          </PersistGate>\r\n        </Provider>,\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './index.css';\r\nimport {store,persistor} from './store'\r\nimport { Provider } from 'react-redux'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport IpfsRouter from 'ipfs-react-router';\r\nimport { Container } from 'react-bootstrap';\r\nimport { PersistGate } from 'redux-persist/integration/react'\r\n\r\nReactDOM.render(\r\n    <IpfsRouter> \r\n        <Provider store={store}>            \r\n            <PersistGate loading={null} persistor={persistor}>\r\n                <Container id=\"body\">\r\n                    <App/>\r\n                </Container>\r\n            </PersistGate>\r\n        </Provider>,\r\n    </IpfsRouter>,\r\n    document.getElementById('root'));"],"sourceRoot":""}